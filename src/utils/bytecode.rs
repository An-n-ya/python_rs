#[allow(non_camel_case_types)]
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum ByteCode{
    CACHE,
    POP_TOP,
    PUSH_NULL,
    NOP,
    UNARY_POSITIVE,
    UNARY_NEGATIVE,
    UNARY_NOT,
    UNARY_INVERT,
    BINARY_SUBSCR,
    GET_LEN,
    MATCH_MAPPING,
    MATCH_SEQUENCE,
    MATCH_KEYS,
    PUSH_EXC_INFO,
    CHECK_EXC_MATCH,
    CHECK_EG_MATCH,
    WITH_EXCEPT_START,
    GET_AITER,
    GET_ANEXT,
    BEFORE_ASYNC_WITH,
    BEFORE_WITH,
    END_ASYNC_FOR,
    STORE_SUBSCR,
    DELETE_SUBSCR,
    GET_ITER,
    GET_YIELD_FROM_ITER,
    PRINT_EXPR,
    LOAD_BUILD_CLASS,
    LOAD_ASSERTION_ERROR,
    RETURN_GENERATOR,
    LIST_TO_TUPLE,
    RETURN_VALUE,
    IMPORT_STAR,
    SETUP_ANNOTATIONS,
    YIELD_VALUE,
    ASYNC_GEN_WRAP,
    PREP_RERAISE_STAR,
    POP_EXCEPT,
    STORE_NAME,
    DELETE_NAME,
    UNPACK_SEQUENCE,
    FOR_ITER,
    UNPACK_EX,
    STORE_ATTR,
    DELETE_ATTR,
    STORE_GLOBAL,
    DELETE_GLOBAL,
    SWAP,
    LOAD_CONST,
    LOAD_NAME,
    BUILD_TUPLE,
    BUILD_LIST,
    BUILD_SET,
    BUILD_MAP,
    LOAD_ATTR,
    COMPARE_OP,
    IMPORT_NAME,
    IMPORT_FROM,
    JUMP_FORWARD,
    JUMP_IF_FALSE_OR_POP,
    JUMP_IF_TRUE_OR_POP,
    POP_JUMP_FORWARD_IF_FALSE,
    POP_JUMP_FORWARD_IF_TRUE,
    LOAD_GLOBAL,
    IS_OP,
    CONTAINS_OP,
    RERAISE,
    COPY,
    BINARY_OP,
    SEND,
    LOAD_FAST,
    STORE_FAST,
    DELETE_FAST,
    POP_JUMP_FORWARD_IF_NOT_NONE,
    POP_JUMP_FORWARD_IF_NONE,
    RAISE_VARARGS,
    GET_AWAITABLE,
    MAKE_FUNCTION,
    BUILD_SLICE,
    JUMP_BACKWARD_NO_INTERRUPT,
    MAKE_CELL,
    LOAD_CLOSURE,
    LOAD_DEREF,
    STORE_DEREF,
    DELETE_DEREF,
    JUMP_BACKWARD,
    CALL_FUNCTION_EX,
    EXTENDED_ARG,
    LIST_APPEND,
    SET_ADD,
    MAP_ADD,
    LOAD_CLASSDEREF,
    COPY_FREE_VARS,
    RESUME,
    MATCH_CLASS,
    FORMAT_VALUE,
    BUILD_CONST_KEY_MAP,
    BUILD_STRING,
    LOAD_METHOD,
    LIST_EXTEND,
    SET_UPDATE,
    DICT_MERGE,
    DICT_UPDATE,
    PRECALL,
    CALL,
    KW_NAMES,
    POP_JUMP_BACKWARD_IF_NOT_NONE,
    POP_JUMP_BACKWARD_IF_NONE,
    POP_JUMP_BACKWARD_IF_FALSE,
    POP_JUMP_BACKWARD_IF_TRUE,
}

const CACHE_NUM: [u8; 256] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];


impl ByteCode {
    pub fn have_arg(&self) -> bool {
        let opcode: u8 = (*self).into();
        opcode >= 0x5a
    }
    pub fn cache_num(&self) -> u8 {
        let opcode: u8 = (*self).into();
        CACHE_NUM[opcode as usize]
    }
}

impl From<u8> for ByteCode {
    fn from(value: u8) -> Self {
        match value {
            0x0 => ByteCode::CACHE,
            0x1 => ByteCode::POP_TOP,
            0x2 => ByteCode::PUSH_NULL,
            0x9 => ByteCode::NOP,
            0xa => ByteCode::UNARY_POSITIVE,
            0xb => ByteCode::UNARY_NEGATIVE,
            0xc => ByteCode::UNARY_NOT,
            0xf => ByteCode::UNARY_INVERT,
            0x19 => ByteCode::BINARY_SUBSCR,
            0x1e => ByteCode::GET_LEN,
            0x1f => ByteCode::MATCH_MAPPING,
            0x20 => ByteCode::MATCH_SEQUENCE,
            0x21 => ByteCode::MATCH_KEYS,
            0x23 => ByteCode::PUSH_EXC_INFO,
            0x24 => ByteCode::CHECK_EXC_MATCH,
            0x25 => ByteCode::CHECK_EG_MATCH,
            0x31 => ByteCode::WITH_EXCEPT_START,
            0x32 => ByteCode::GET_AITER,
            0x33 => ByteCode::GET_ANEXT,
            0x34 => ByteCode::BEFORE_ASYNC_WITH,
            0x35 => ByteCode::BEFORE_WITH,
            0x36 => ByteCode::END_ASYNC_FOR,
            0x3c => ByteCode::STORE_SUBSCR,
            0x3d => ByteCode::DELETE_SUBSCR,
            0x44 => ByteCode::GET_ITER,
            0x45 => ByteCode::GET_YIELD_FROM_ITER,
            0x46 => ByteCode::PRINT_EXPR,
            0x47 => ByteCode::LOAD_BUILD_CLASS,
            0x4a => ByteCode::LOAD_ASSERTION_ERROR,
            0x4b => ByteCode::RETURN_GENERATOR,
            0x52 => ByteCode::LIST_TO_TUPLE,
            0x53 => ByteCode::RETURN_VALUE,
            0x54 => ByteCode::IMPORT_STAR,
            0x55 => ByteCode::SETUP_ANNOTATIONS,
            0x56 => ByteCode::YIELD_VALUE,
            0x57 => ByteCode::ASYNC_GEN_WRAP,
            0x58 => ByteCode::PREP_RERAISE_STAR,
            0x59 => ByteCode::POP_EXCEPT,
            0x5a => ByteCode::STORE_NAME,
            0x5b => ByteCode::DELETE_NAME,
            0x5c => ByteCode::UNPACK_SEQUENCE,
            0x5d => ByteCode::FOR_ITER,
            0x5e => ByteCode::UNPACK_EX,
            0x5f => ByteCode::STORE_ATTR,
            0x60 => ByteCode::DELETE_ATTR,
            0x61 => ByteCode::STORE_GLOBAL,
            0x62 => ByteCode::DELETE_GLOBAL,
            0x63 => ByteCode::SWAP,
            0x64 => ByteCode::LOAD_CONST,
            0x65 => ByteCode::LOAD_NAME,
            0x66 => ByteCode::BUILD_TUPLE,
            0x67 => ByteCode::BUILD_LIST,
            0x68 => ByteCode::BUILD_SET,
            0x69 => ByteCode::BUILD_MAP,
            0x6a => ByteCode::LOAD_ATTR,
            0x6b => ByteCode::COMPARE_OP,
            0x6c => ByteCode::IMPORT_NAME,
            0x6d => ByteCode::IMPORT_FROM,
            0x6e => ByteCode::JUMP_FORWARD,
            0x6f => ByteCode::JUMP_IF_FALSE_OR_POP,
            0x70 => ByteCode::JUMP_IF_TRUE_OR_POP,
            0x72 => ByteCode::POP_JUMP_FORWARD_IF_FALSE,
            0x73 => ByteCode::POP_JUMP_FORWARD_IF_TRUE,
            0x74 => ByteCode::LOAD_GLOBAL,
            0x75 => ByteCode::IS_OP,
            0x76 => ByteCode::CONTAINS_OP,
            0x77 => ByteCode::RERAISE,
            0x78 => ByteCode::COPY,
            0x7a => ByteCode::BINARY_OP,
            0x7b => ByteCode::SEND,
            0x7c => ByteCode::LOAD_FAST,
            0x7d => ByteCode::STORE_FAST,
            0x7e => ByteCode::DELETE_FAST,
            0x80 => ByteCode::POP_JUMP_FORWARD_IF_NOT_NONE,
            0x81 => ByteCode::POP_JUMP_FORWARD_IF_NONE,
            0x82 => ByteCode::RAISE_VARARGS,
            0x83 => ByteCode::GET_AWAITABLE,
            0x84 => ByteCode::MAKE_FUNCTION,
            0x85 => ByteCode::BUILD_SLICE,
            0x86 => ByteCode::JUMP_BACKWARD_NO_INTERRUPT,
            0x87 => ByteCode::MAKE_CELL,
            0x88 => ByteCode::LOAD_CLOSURE,
            0x89 => ByteCode::LOAD_DEREF,
            0x8a => ByteCode::STORE_DEREF,
            0x8b => ByteCode::DELETE_DEREF,
            0x8c => ByteCode::JUMP_BACKWARD,
            0x8e => ByteCode::CALL_FUNCTION_EX,
            0x90 => ByteCode::EXTENDED_ARG,
            0x91 => ByteCode::LIST_APPEND,
            0x92 => ByteCode::SET_ADD,
            0x93 => ByteCode::MAP_ADD,
            0x94 => ByteCode::LOAD_CLASSDEREF,
            0x95 => ByteCode::COPY_FREE_VARS,
            0x97 => ByteCode::RESUME,
            0x98 => ByteCode::MATCH_CLASS,
            0x9b => ByteCode::FORMAT_VALUE,
            0x9c => ByteCode::BUILD_CONST_KEY_MAP,
            0x9d => ByteCode::BUILD_STRING,
            0xa0 => ByteCode::LOAD_METHOD,
            0xa2 => ByteCode::LIST_EXTEND,
            0xa3 => ByteCode::SET_UPDATE,
            0xa4 => ByteCode::DICT_MERGE,
            0xa5 => ByteCode::DICT_UPDATE,
            0xa6 => ByteCode::PRECALL,
            0xab => ByteCode::CALL,
            0xac => ByteCode::KW_NAMES,
            0xad => ByteCode::POP_JUMP_BACKWARD_IF_NOT_NONE,
            0xae => ByteCode::POP_JUMP_BACKWARD_IF_NONE,
            0xaf => ByteCode::POP_JUMP_BACKWARD_IF_FALSE,
            0xb0 => ByteCode::POP_JUMP_BACKWARD_IF_TRUE,
            _ => panic!("invalid opcode {}", value)
        }
    }
}

impl Into<u8> for ByteCode {
    fn into(self) -> u8 {
        match self {
            ByteCode::CACHE =>  0x0 ,
            ByteCode::POP_TOP =>  0x1 ,
            ByteCode::PUSH_NULL =>  0x2 ,
            ByteCode::NOP =>  0x9 ,
            ByteCode::UNARY_POSITIVE =>  0xa ,
            ByteCode::UNARY_NEGATIVE =>  0xb ,
            ByteCode::UNARY_NOT =>  0xc ,
            ByteCode::UNARY_INVERT =>  0xf ,
            ByteCode::BINARY_SUBSCR => 0x19 ,
            ByteCode::GET_LEN => 0x1e ,
            ByteCode::MATCH_MAPPING => 0x1f ,
            ByteCode::MATCH_SEQUENCE => 0x20 ,
            ByteCode::MATCH_KEYS => 0x21 ,
            ByteCode::PUSH_EXC_INFO => 0x23 ,
            ByteCode::CHECK_EXC_MATCH => 0x24 ,
            ByteCode::CHECK_EG_MATCH => 0x25 ,
            ByteCode::WITH_EXCEPT_START => 0x31 ,
            ByteCode::GET_AITER => 0x32 ,
            ByteCode::GET_ANEXT => 0x33 ,
            ByteCode::BEFORE_ASYNC_WITH => 0x34 ,
            ByteCode::BEFORE_WITH => 0x35 ,
            ByteCode::END_ASYNC_FOR => 0x36 ,
            ByteCode::STORE_SUBSCR => 0x3c ,
            ByteCode::DELETE_SUBSCR => 0x3d ,
            ByteCode::GET_ITER => 0x44 ,
            ByteCode::GET_YIELD_FROM_ITER => 0x45 ,
            ByteCode::PRINT_EXPR => 0x46 ,
            ByteCode::LOAD_BUILD_CLASS => 0x47 ,
            ByteCode::LOAD_ASSERTION_ERROR => 0x4a ,
            ByteCode::RETURN_GENERATOR => 0x4b ,
            ByteCode::LIST_TO_TUPLE => 0x52 ,
            ByteCode::RETURN_VALUE => 0x53 ,
            ByteCode::IMPORT_STAR => 0x54 ,
            ByteCode::SETUP_ANNOTATIONS => 0x55 ,
            ByteCode::YIELD_VALUE => 0x56 ,
            ByteCode::ASYNC_GEN_WRAP => 0x57 ,
            ByteCode::PREP_RERAISE_STAR => 0x58 ,
            ByteCode::POP_EXCEPT => 0x59 ,
            ByteCode::STORE_NAME => 0x5a ,
            ByteCode::DELETE_NAME => 0x5b ,
            ByteCode::UNPACK_SEQUENCE => 0x5c ,
            ByteCode::FOR_ITER => 0x5d ,
            ByteCode::UNPACK_EX => 0x5e ,
            ByteCode::STORE_ATTR => 0x5f ,
            ByteCode::DELETE_ATTR => 0x60 ,
            ByteCode::STORE_GLOBAL => 0x61 ,
            ByteCode::DELETE_GLOBAL => 0x62 ,
            ByteCode::SWAP => 0x63 ,
            ByteCode::LOAD_CONST => 0x64 ,
            ByteCode::LOAD_NAME => 0x65 ,
            ByteCode::BUILD_TUPLE => 0x66 ,
            ByteCode::BUILD_LIST => 0x67 ,
            ByteCode::BUILD_SET => 0x68 ,
            ByteCode::BUILD_MAP => 0x69 ,
            ByteCode::LOAD_ATTR => 0x6a ,
            ByteCode::COMPARE_OP => 0x6b ,
            ByteCode::IMPORT_NAME => 0x6c ,
            ByteCode::IMPORT_FROM => 0x6d ,
            ByteCode::JUMP_FORWARD => 0x6e ,
            ByteCode::JUMP_IF_FALSE_OR_POP => 0x6f ,
            ByteCode::JUMP_IF_TRUE_OR_POP => 0x70 ,
            ByteCode::POP_JUMP_FORWARD_IF_FALSE => 0x72 ,
            ByteCode::POP_JUMP_FORWARD_IF_TRUE => 0x73 ,
            ByteCode::LOAD_GLOBAL => 0x74 ,
            ByteCode::IS_OP => 0x75 ,
            ByteCode::CONTAINS_OP => 0x76 ,
            ByteCode::RERAISE => 0x77 ,
            ByteCode::COPY => 0x78 ,
            ByteCode::BINARY_OP => 0x7a ,
            ByteCode::SEND => 0x7b ,
            ByteCode::LOAD_FAST => 0x7c ,
            ByteCode::STORE_FAST => 0x7d ,
            ByteCode::DELETE_FAST => 0x7e ,
            ByteCode::POP_JUMP_FORWARD_IF_NOT_NONE => 0x80 ,
            ByteCode::POP_JUMP_FORWARD_IF_NONE => 0x81 ,
            ByteCode::RAISE_VARARGS => 0x82 ,
            ByteCode::GET_AWAITABLE => 0x83 ,
            ByteCode::MAKE_FUNCTION => 0x84 ,
            ByteCode::BUILD_SLICE => 0x85 ,
            ByteCode::JUMP_BACKWARD_NO_INTERRUPT => 0x86 ,
            ByteCode::MAKE_CELL => 0x87 ,
            ByteCode::LOAD_CLOSURE => 0x88 ,
            ByteCode::LOAD_DEREF => 0x89 ,
            ByteCode::STORE_DEREF => 0x8a ,
            ByteCode::DELETE_DEREF => 0x8b ,
            ByteCode::JUMP_BACKWARD => 0x8c ,
            ByteCode::CALL_FUNCTION_EX => 0x8e ,
            ByteCode::EXTENDED_ARG => 0x90 ,
            ByteCode::LIST_APPEND => 0x91 ,
            ByteCode::SET_ADD => 0x92 ,
            ByteCode::MAP_ADD => 0x93 ,
            ByteCode::LOAD_CLASSDEREF => 0x94 ,
            ByteCode::COPY_FREE_VARS => 0x95 ,
            ByteCode::RESUME => 0x97 ,
            ByteCode::MATCH_CLASS => 0x98 ,
            ByteCode::FORMAT_VALUE => 0x9b ,
            ByteCode::BUILD_CONST_KEY_MAP => 0x9c ,
            ByteCode::BUILD_STRING => 0x9d ,
            ByteCode::LOAD_METHOD => 0xa0 ,
            ByteCode::LIST_EXTEND => 0xa2 ,
            ByteCode::SET_UPDATE => 0xa3 ,
            ByteCode::DICT_MERGE => 0xa4 ,
            ByteCode::DICT_UPDATE => 0xa5 ,
            ByteCode::PRECALL => 0xa6 ,
            ByteCode::CALL => 0xab ,
            ByteCode::KW_NAMES => 0xac ,
            ByteCode::POP_JUMP_BACKWARD_IF_NOT_NONE => 0xad ,
            ByteCode::POP_JUMP_BACKWARD_IF_NONE => 0xae ,
            ByteCode::POP_JUMP_BACKWARD_IF_FALSE => 0xaf ,
            ByteCode::POP_JUMP_BACKWARD_IF_TRUE => 0xb0 ,
        }

    }
}